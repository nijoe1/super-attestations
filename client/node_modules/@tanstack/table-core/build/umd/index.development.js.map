{"version":3,"file":"index.development.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              let sortInt = 0\n\n              // All sorting ints should always return in ascending order\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = aValue === undefined\n                const bUndefined = bValue === undefined\n\n                if (aUndefined || bUndefined) {\n                  sortInt =\n                    aUndefined && bUndefined\n                      ? 0\n                      : aUndefined\n                      ? columnInfo.sortUndefined\n                      : -columnInfo.sortUndefined\n                }\n              }\n\n              if (sortInt === 0) {\n                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n              }\n\n              // If sorting is non-zero, take care of desc and inversion\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","process","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","Sorting","sorting","sortingFn","sortUndefined","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","mergeOptions","coreInitialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","_facetedUniqueValues$","set","get","_facetedRowModel$flat","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","sortInt","aValue","bValue","aUndefined","bUndefined","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}