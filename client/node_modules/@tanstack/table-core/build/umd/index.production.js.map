{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getExpandedRowModel.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getPaginationRowModel.ts","../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              let sortInt = 0\n\n              // All sorting ints should always return in ascending order\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = aValue === undefined\n                const bUndefined = bValue === undefined\n\n                if (aUndefined || bUndefined) {\n                  sortInt =\n                    aUndefined && bUndefined\n                      ? 0\n                      : aUndefined\n                      ? columnInfo.sortUndefined\n                      : -columnInfo.sortUndefined\n                }\n              }\n\n              if (sortInt === 0) {\n                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n              }\n\n              // If sorting is non-zero, take care of desc and inversion\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","_result","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","sortUndefined","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","renderValue","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","acc","filterRows","filterRowImpl","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","_table$options$maxLea2","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","_options$initialState","defaultOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","_table$getColumn","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","j","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","sortInt","aUndefined","bUndefined"],"mappings":"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"}