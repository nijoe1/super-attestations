{"version":3,"file":"Filters.js","sources":["../../../src/features/Filters.ts"],"sourcesContent":["import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n"],"names":["Filters","getDefaultColumnDef","filterFn","getInitialState","state","columnFilters","globalFilter","undefined","getDefaultOptions","table","onColumnFiltersChange","makeStateUpdater","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","column","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","flatRows","_getAllCellsByColumnId","id","getValue","createColumn","getAutoFilterFn","firstRow","filterFns","includesString","inNumberRange","equals","Array","isArray","arrIncludes","weakEquals","getFilterFn","_table$options$filter","_table$options$filter2","isFunction","columnDef","options","getCanFilter","_column$columnDef$ena","_table$options$enable","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","accessorFn","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","getState","find","d","_table$getState$colum3","_table$getState$colum4","findIndex","setFilterValue","setColumnFilters","old","previousfilter","newFilter","functionalUpdate","shouldAutoRemoveFilter","_old$filter","filter","newFilterObj","_old$map","map","length","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","createRow","row","columnFiltersMeta","createTable","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","updater","leafColumns","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","defaultState","initialState","resetColumnFilters","_table$initialState$c","_table$initialState","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","autoRemove"],"mappings":"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"}