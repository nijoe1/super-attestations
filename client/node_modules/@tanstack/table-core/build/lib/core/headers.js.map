{"version":3,"file":"headers.js","sources":["../../../src/core/headers.ts"],"sourcesContent":["import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n"],"names":["createHeader","table","column","options","_options$id","id","header","index","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","length","map","push","getContext","_features","forEach","feature","Object","assign","Headers","createTable","getHeaderGroups","memo","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leafColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","d","filter","Boolean","rightColumns","centerColumns","includes","headerGroups","buildHeaderGroups","key","process","env","NODE_ENV","debug","_table$options$debugA","debugAll","debugHeaders","getCenterHeaderGroups","_table$options$debugA2","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","flat","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","columns","Math","max","getIsVisible","_column$columns","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","parent","undefined","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","_ref","childColSpan","childRowSpan","minChildRowSpan","min"],"mappings":"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"}