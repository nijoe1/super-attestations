{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  hasProperty,\n  isValidJson,\n  isObject,\n  isJsonRpcError,\n  Json,\n  JsonRpcError as SerializedJsonRpcError,\n  RuntimeObject,\n} from '@metamask/utils';\n\nimport { errorCodes, errorValues } from './error-constants';\n\n/**\n * A data object, that must be either:\n *\n * - A JSON-serializable object.\n * - An object with a `cause` property that is an error-like value, and any\n * other properties that are JSON-serializable.\n */\nexport type DataWithOptionalCause =\n  | Json\n  | {\n      // Unfortunately we can't use just `Json` here, because all properties of\n      // an object with an index signature must be assignable to the index\n      // signature's type. So we have to use `Json | unknown` instead.\n      [key: string]: Json | unknown;\n      cause: unknown;\n    };\n\nconst FALLBACK_ERROR_CODE = errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE =\n  'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR: SerializedJsonRpcError = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE),\n};\n\nexport const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n\ntype ErrorValueKey = keyof typeof errorValues;\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param code - The error code.\n * @param fallbackMessage - The fallback message to use if the code has no\n * corresponding message.\n * @returns The message for the given code, or the fallback message if the code\n * has no corresponding message.\n */\nexport function getMessageFromCode(\n  code: unknown,\n  fallbackMessage: string = FALLBACK_MESSAGE,\n): string {\n  if (isValidCode(code)) {\n    const codeString = code.toString();\n\n    if (hasProperty(errorValues, codeString)) {\n      return errorValues[codeString as ErrorValueKey].message;\n    }\n\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is valid if it is an integer.\n *\n * @param code - The error code.\n * @returns Whether the given code is valid.\n */\nexport function isValidCode(code: unknown): code is number {\n  return Number.isInteger(code);\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.cause property.\n *\n * @param error - The error to serialize.\n * @param options - Options bag.\n * @param options.fallbackError - The error to return if the given error is\n * not compatible. Should be a JSON serializable value.\n * @param options.shouldIncludeStack - Whether to include the error's stack\n * on the returned object.\n * @returns The serialized error.\n */\nexport function serializeError(\n  error: unknown,\n  { fallbackError = FALLBACK_ERROR, shouldIncludeStack = true } = {},\n): SerializedJsonRpcError {\n  if (!isJsonRpcError(fallbackError)) {\n    throw new Error(\n      'Must provide fallback error with integer number code and string message.',\n    );\n  }\n\n  const serialized = buildError(error, fallbackError);\n\n  if (!shouldIncludeStack) {\n    delete serialized.stack;\n  }\n\n  return serialized;\n}\n\n/**\n * Construct a JSON-serializable object given an error and a JSON serializable `fallbackError`\n *\n * @param error - The error in question.\n * @param fallbackError - A JSON serializable fallback error.\n * @returns A JSON serializable error object.\n */\nfunction buildError(\n  error: unknown,\n  fallbackError: SerializedJsonRpcError,\n): SerializedJsonRpcError {\n  // If an error specifies a `serialize` function, we call it and return the result.\n  if (\n    error &&\n    typeof error === 'object' &&\n    'serialize' in error &&\n    typeof error.serialize === 'function'\n  ) {\n    return error.serialize();\n  }\n\n  if (isJsonRpcError(error)) {\n    return error;\n  }\n\n  // If the error does not match the JsonRpcError type, use the fallback error, but try to include the original error as `cause`.\n  const cause = serializeCause(error);\n  const fallbackWithCause = {\n    ...fallbackError,\n    data: { cause },\n  };\n\n  return fallbackWithCause;\n}\n\n/**\n * Check if the given code is a valid JSON-RPC server error code.\n *\n * @param code - The error code.\n * @returns Whether the given code is a valid JSON-RPC server error code.\n */\nfunction isJsonRpcServerError(code: number): boolean {\n  return code >= -32099 && code <= -32000;\n}\n\n/**\n * Serializes an unknown error to be used as the `cause` in a fallback error.\n *\n * @param error - The unknown error.\n * @returns A JSON-serializable object containing as much information about the original error as possible.\n */\nexport function serializeCause(error: unknown): Json {\n  if (Array.isArray(error)) {\n    return error.map((entry) => {\n      if (isValidJson(entry)) {\n        return entry;\n      } else if (isObject(entry)) {\n        return serializeObject(entry);\n      }\n      return null;\n    });\n  } else if (isObject(error)) {\n    return serializeObject(error);\n  }\n\n  if (isValidJson(error)) {\n    return error;\n  }\n\n  return null;\n}\n\n/**\n * Extracts all JSON-serializable properties from an object.\n *\n * @param object - The object in question.\n * @returns An object containing all the JSON-serializable properties.\n */\nfunction serializeObject(object: RuntimeObject): Json {\n  return Object.getOwnPropertyNames(object).reduce<Record<string, Json>>(\n    (acc, key) => {\n      const value = object[key];\n      if (isValidJson(value)) {\n        acc[key] = value;\n      }\n\n      return acc;\n    },\n    {},\n  );\n}\n"]}