{"version":3,"file":"errors.js","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsonRpcError, EthereumProviderError } from './classes';\nimport { errorCodes } from './error-constants';\nimport { DataWithOptionalCause, getMessageFromCode } from './utils';\n\ntype EthereumErrorOptions<T extends DataWithOptionalCause> = {\n  message?: string;\n  data?: T;\n};\n\ntype ServerErrorOptions<T extends DataWithOptionalCause> = {\n  code: number;\n} & EthereumErrorOptions<T>;\n\ntype CustomErrorArg<T extends DataWithOptionalCause> = ServerErrorOptions<T>;\n\ntype JsonRpcErrorsArg<T extends DataWithOptionalCause> =\n  | EthereumErrorOptions<T>\n  | string;\n\nexport const rpcErrors = {\n  /**\n   * Get a JSON RPC 2.0 Parse (-32700) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  parse: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.parse, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidRequest: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.invalidRequest, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidParams: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.invalidParams, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotFound: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.methodNotFound, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Internal (-32603) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  internal: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.internal, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32005 ] range.\n   * Codes -32000 through -32004 are reserved by EIP-1474.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  server: <T extends DataWithOptionalCause>(opts: ServerErrorOptions<T>) => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error(\n        'Ethereum RPC Server errors must provide single object argument.',\n      );\n    }\n    const { code } = opts;\n    if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n      throw new Error(\n        '\"code\" must be an integer such that: -32099 <= code <= -32005',\n      );\n    }\n    return getJsonRpcError(code, opts);\n  },\n\n  /**\n   * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidInput: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.invalidInput, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceNotFound: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.resourceNotFound, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceUnavailable: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.resourceUnavailable, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  transactionRejected: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.transactionRejected, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotSupported: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.methodNotSupported, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  limitExceeded: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.limitExceeded, arg),\n};\n\nexport const providerErrors = {\n  /**\n   * Get an Ethereum Provider User Rejected Request (4001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  userRejectedRequest: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.userRejectedRequest, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Unauthorized (4100) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unauthorized: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.unauthorized, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Unsupported Method (4200) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unsupportedMethod: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.unsupportedMethod, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Not Connected (4900) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  disconnected: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.disconnected, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Chain Not Connected (4901) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  chainDisconnected: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.chainDisconnected, arg);\n  },\n\n  /**\n   * Get a custom Ethereum Provider error.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  custom: <T extends DataWithOptionalCause>(opts: CustomErrorArg<T>) => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error(\n        'Ethereum Provider custom errors must provide single object argument.',\n      );\n    }\n\n    const { code, message, data } = opts;\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string');\n    }\n    return new EthereumProviderError(code, message, data);\n  },\n};\n\n/**\n * Get a generic JSON-RPC error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link JsonRpcError} class.\n */\nfunction getJsonRpcError<T extends DataWithOptionalCause>(\n  code: number,\n  arg?: JsonRpcErrorsArg<T>,\n): JsonRpcError<T> {\n  const [message, data] = parseOpts(arg);\n  return new JsonRpcError(code, message ?? getMessageFromCode(code), data);\n}\n\n/**\n * Get an Ethereum Provider error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link EthereumProviderError} class.\n */\nfunction getEthProviderError<T extends DataWithOptionalCause>(\n  code: number,\n  arg?: JsonRpcErrorsArg<T>,\n): EthereumProviderError<T> {\n  const [message, data] = parseOpts(arg);\n  return new EthereumProviderError(\n    code,\n    message ?? getMessageFromCode(code),\n    data,\n  );\n}\n\n/**\n * Get an error message and optional data from an options bag.\n *\n * @param arg - The error message or options bag.\n * @returns A tuple containing the error message and optional data.\n */\nfunction parseOpts<T extends DataWithOptionalCause>(\n  arg?: JsonRpcErrorsArg<T>,\n): [message?: string | undefined, data?: T | undefined] {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const { message, data } = arg;\n\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message ?? undefined, data];\n    }\n  }\n\n  return [];\n}\n"]}