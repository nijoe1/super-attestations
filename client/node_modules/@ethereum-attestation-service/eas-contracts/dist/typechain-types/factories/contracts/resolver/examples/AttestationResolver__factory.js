"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationResolver__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error",
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error",
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error",
    },
    {
        inputs: [],
        name: "OutOfBounds",
        type: "error",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64",
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32",
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address",
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple",
            },
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64",
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32",
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address",
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]",
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]",
            },
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64",
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32",
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address",
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]",
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]",
            },
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32",
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64",
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32",
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address",
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple",
            },
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
            {
                internalType: "uint256",
                name: "start",
                type: "uint256",
            },
        ],
        name: "toBytes32",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        stateMutability: "payable",
        type: "receive",
    },
];
const _bytecode = "0x61010060405234801561001157600080fd5b50604051610be3380380610be383398101604081905261003091610079565b6001608052600060a081905260c052806001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e052506100a9565b60006020828403121561008b57600080fd5b81516001600160a01b03811681146100a257600080fd5b9392505050565b60805160a05160c05160e051610afa6100e9600039600081816104ac015261051e015260006101d2015260006101a9015260006101800152610afa6000f3fe6080604052600436106100745760003560e01c806399dd9bd71161004e57806399dd9bd714610111578063ce46e0461461013f578063e49617e114610153578063e60c35051461016657600080fd5b806354fd4d50146100b057806388e5b2d9146100db57806391db0b7e146100fe57600080fd5b366100ab576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100bc57600080fd5b506100c5610179565b6040516100d2919061073c565b60405180910390f35b6100ee6100e93660046107d9565b61021c565b60405190151581526020016100d2565b6100ee61010c3660046107d9565b6102e4565b34801561011d57600080fd5b5061013161012c366004610874565b61039c565b6040519081526020016100d2565b34801561014b57600080fd5b5060006100ee565b6100ee610161366004610947565b6103af565b6100ee610174366004610947565b6103c2565b60606101a47f00000000000000000000000000000000000000000000000000000000000000006103d6565b6101cd7f00000000000000000000000000000000000000000000000000000000000000006103d6565b6101f67f00000000000000000000000000000000000000000000000000000000000000006103d6565b60405160200161020893929190610983565b604051602081830303815290604052905090565b6000610226610494565b833460005b828110156102d4576000868683818110610247576102476109f9565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f6109f9565b90506020028101906102b19190610a28565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee610494565b833460005b828110156102d457600086868381811061030f5761030f6109f9565b90506020020135905082811115610352576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61037f898984818110610367576103676109f9565b90506020028101906103799190610a28565b82610505565b6103905760009450505050506102dc565b909103906001016102f3565b60006103a883836105ed565b9392505050565b60006103b9610494565b60015b92915050565b60006103cc610494565b6103bc8234610505565b606060006103e383610636565b600101905060008167ffffffffffffffff81111561040357610403610845565b6040519080825280601f01601f19166020018201604052801561042d576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461043757509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610503576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663e30bb56361058e610554610120870187610a66565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506105ed915050565b6040518263ffffffff1660e01b81526004016105ac91815260200190565b602060405180830381865afa1580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a89190610acb565b6000816020018351101561062d576040517fb4120f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50016020015190565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061067f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106106ab576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106106c957662386f26fc10000830492506010015b6305f5e10083106106e1576305f5e100830492506008015b61271083106106f557612710830492506004015b60648310610707576064830492506002015b600a83106103bc5760010192915050565b60005b8381101561073357818101518382015260200161071b565b50506000910152565b602081526000825180602084015261075b816040850160208701610718565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261079f57600080fd5b50813567ffffffffffffffff8111156107b757600080fd5b6020830191508360208260051b85010111156107d257600080fd5b9250929050565b600080600080604085870312156107ef57600080fd5b843567ffffffffffffffff8082111561080757600080fd5b6108138883890161078d565b9096509450602087013591508082111561082c57600080fd5b506108398782880161078d565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561088757600080fd5b823567ffffffffffffffff8082111561089f57600080fd5b818501915085601f8301126108b357600080fd5b8135818111156108c5576108c5610845565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561090b5761090b610845565b8160405282815288602084870101111561092457600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b60006020828403121561095957600080fd5b813567ffffffffffffffff81111561097057600080fd5b820161014081850312156103a857600080fd5b60008451610995818460208901610718565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516109d1816001850160208a01610718565b600192019182015283516109ec816002840160208801610718565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112610a5c57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610a9b57600080fd5b83018035915067ffffffffffffffff821115610ab657600080fd5b6020019150368190038213156107d257600080fd5b600060208284031215610add57600080fd5b815180151581146103a857600080fdfea164736f6c6343000813000a";
const isSuperArgs = (xs) => xs.length > 1;
class AttestationResolver__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(eas, overrides) {
        return super.getDeployTransaction(eas, overrides || {});
    }
    deploy(eas, overrides) {
        return super.deploy(eas, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.AttestationResolver__factory = AttestationResolver__factory;
//# sourceMappingURL=AttestationResolver__factory.js.map