import { TransactionReceipt, TransactionResponse } from 'ethers';
export declare const ZERO_ADDRESS: string;
export declare const ZERO_BYTES = "0x";
export declare const ZERO_BYTES32 = "0x0000000000000000000000000000000000000000000000000000000000000000";
export declare const getSchemaUID: (schema: string, resolverAddress: string, revocable: boolean) => string;
export declare const getUID: (schema: string, recipient: string, attester: string, time: bigint, expirationTime: bigint, revocable: boolean, refUID: string, data: string, bump: number) => string;
export declare const getOffchainUID: (version: number, schema: string, recipient: string, time: bigint, expirationTime: bigint, revocable: boolean, refUID: string, data: string) => string;
export declare const getUIDsFromMultiAttestTx: (res: Promise<TransactionResponse> | TransactionResponse) => Promise<string[]>;
export declare const getUIDFromAttestTx: (res: Promise<TransactionResponse> | TransactionResponse) => Promise<string>;
export declare const getUIDFromMultiDelegatedProxyAttestTx: (res: Promise<TransactionResponse> | TransactionResponse) => Promise<string[]>;
export declare const getUIDFromMultiDelegatedProxyAttestReceipt: (res: Promise<TransactionReceipt> | TransactionReceipt) => Promise<string[]>;
export declare const getUIDFromDelegatedProxyAttestTx: (res: Promise<TransactionResponse> | TransactionResponse) => Promise<string>;
export declare const getUIDFromDelegatedProxyAttestReceipt: (res: Promise<TransactionReceipt> | TransactionReceipt) => Promise<string>;
export declare const getUIDsFromAttestEvents: (logs?: ReadonlyArray<any>) => string[];
export declare const getTimestampFromTimestampEvents: (logs?: ReadonlyArray<any>) => bigint[];
export declare const getTimestampFromOffchainRevocationEvents: (logs?: ReadonlyArray<any>) => bigint[];
