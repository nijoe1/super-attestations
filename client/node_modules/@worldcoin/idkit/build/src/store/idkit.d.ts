import { IDKITStage } from '../types';
import type { VerificationMethods } from '../types/config';
import type { Config, ConfigSource, IDKitConfig } from '../types/config';
import type { CallbackFn, IErrorState, IExperimentalSuccessResult, ISuccessResult } from '../types';
export type IDKitStore = {
    app_id: IDKitConfig['app_id'];
    action: IDKitConfig['action'];
    signal: IDKitConfig['signal'];
    action_description?: IDKitConfig['action_description'];
    walletConnectProjectId?: IDKitConfig['walletConnectProjectId'];
    credential_types?: IDKitConfig['credential_types'];
    phoneNumber: string;
    code: string;
    open: boolean;
    stage: IDKITStage;
    autoClose: boolean;
    processing: boolean;
    theme: Config['theme'];
    result: IExperimentalSuccessResult | ISuccessResult | null;
    methods: VerificationMethods[];
    errorState: IErrorState | null;
    verifyCallbacks: Record<ConfigSource, CallbackFn<IExperimentalSuccessResult> | CallbackFn<ISuccessResult> | undefined> | Record<string, never>;
    successCallbacks: Record<ConfigSource, CallbackFn<IExperimentalSuccessResult> | CallbackFn<ISuccessResult> | undefined> | Record<string, never>;
    computed: {
        canGoBack: (stage: IDKITStage) => boolean;
        getDefaultStage: (methods?: Config['experimental_methods']) => IDKITStage;
    };
    retryFlow: () => void;
    setCode: (code: string) => void;
    setStage: (stage: IDKITStage) => void;
    onOpenChange: (open: boolean) => void;
    setProcessing: (processing: boolean) => void;
    handleVerify: (result: IExperimentalSuccessResult | ISuccessResult) => void;
    setErrorState: (state: IErrorState | null) => void;
    setOptions: (options: Config, source: ConfigSource) => void;
    addSuccessCallback: (cb: CallbackFn<IExperimentalSuccessResult> | CallbackFn<ISuccessResult>, source: ConfigSource) => void;
    addVerificationCallback: (cb: CallbackFn<IExperimentalSuccessResult> | CallbackFn<ISuccessResult>, source: ConfigSource) => void;
    setPhoneNumber: (phoneNumber: string) => void;
};
declare const useIDKitStore: import("zustand").UseBoundStore<import("zustand").StoreApi<IDKitStore>>;
export default useIDKitStore;
