/// <reference types="react" />
import useIDKit from './hooks/useIDKit';
import { CredentialType } from './types';
import type { ISuccessResult } from './types';
import { solidityEncode } from './lib/hashing';
import IDKitWidget from './components/IDKitWidget';
import SignInButton from './components/SignInButton';
import type { WidgetProps, Config } from './types/config';
import { VerificationState, AppErrorCodes } from './types/app';
import SignInWithWorldID from './components/SignInWithWorldID';
import { hashToField } from './lib/hashing';
declare const internal: {
    hashToField: typeof hashToField;
    validateABILikeEncoding: (value: string) => boolean;
    generateExternalNullifier: (app_id: string, action: string | import("./types").AbiEncodedValue | undefined) => import("./lib/hashing").HashFunctionOutput;
    QRCode: import("react").MemoExoticComponent<({ data, size }: {
        data: string;
        size?: number | undefined;
    }) => JSX.Element>;
    useAppConnection: (app_id: string, action: string | import("./types").AbiEncodedValue | undefined, signal?: string | import("./types").AbiEncodedValue | undefined, credential_types?: CredentialType[] | undefined, action_description?: string | undefined, walletConnectProjectId?: string | undefined) => {
        reset: () => void;
        result: ISuccessResult | null;
        errorCode: AppErrorCodes | null;
        verificationState: VerificationState;
        qrData: {
            default: string;
            mobile: string;
        } | null;
    };
    VerificationState: typeof VerificationState;
    AppErrorCodes: typeof AppErrorCodes;
};
export { IDKitWidget, useIDKit, solidityEncode, internal, SignInWithWorldID, CredentialType, SignInButton };
export type { ISuccessResult, Config, WidgetProps };
