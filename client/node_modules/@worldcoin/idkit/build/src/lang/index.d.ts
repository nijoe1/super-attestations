type CleanWord<T> = T extends `${string}${' ' | ',' | '!' | '?' | '.' | '`'}${string}` ? never : T extends '' ? never : T;
type ExtractPlaceholders<S extends string> = S extends `${string}:${infer Placeholder}` ? Placeholder extends `${infer Word}${' ' | ',' | '!' | '?' | '.' | '`'}${infer Rest}` ? CleanWord<Word> | ExtractPlaceholders<Rest> : never : never;
type NoPlaceholder<S extends string> = S extends `${string}:${string}` ? never : S;
type PlaceholderValues<S extends string> = {
    [K in ExtractPlaceholders<S>]: string;
};
export declare function __<S extends `${string}:${string}`>(str: S, params: PlaceholderValues<S>): string;
export declare function __<S extends string>(str: NoPlaceholder<S>): string;
export {};
