/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "OpenloginSessionManager": () => (/* reexport */ OpenloginSessionManager)
});

;// CONCATENATED MODULE: external "@babel/runtime/helpers/defineProperty"
const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);
;// CONCATENATED MODULE: external "@toruslabs/base-session-manager"
const base_session_manager_namespaceObject = require("@toruslabs/base-session-manager");
;// CONCATENATED MODULE: external "@toruslabs/eccrypto"
const eccrypto_namespaceObject = require("@toruslabs/eccrypto");
;// CONCATENATED MODULE: external "@toruslabs/metadata-helpers"
const metadata_helpers_namespaceObject = require("@toruslabs/metadata-helpers");
;// CONCATENATED MODULE: ./src/openloginSessionManager.ts




const DEFAULT_SESSION_TIMEOUT = 86400;
class OpenloginSessionManager extends base_session_manager_namespaceObject.BaseSessionManager {
  constructor() {
    let {
      sessionServerBaseUrl,
      sessionNamespace,
      sessionTime,
      sessionId
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();
    defineProperty_default()(this, "sessionServerBaseUrl", "https://broadcast-server.tor.us");
    defineProperty_default()(this, "sessionNamespace", void 0);
    defineProperty_default()(this, "sessionTime", DEFAULT_SESSION_TIMEOUT);
    defineProperty_default()(this, "sessionId", void 0);
    if (sessionServerBaseUrl) {
      this.sessionServerBaseUrl = sessionServerBaseUrl;
    }
    if (sessionNamespace) this.sessionNamespace = sessionNamespace;
    if (sessionTime) this.sessionTime = sessionTime;
    if (sessionId) this.sessionId = sessionId;
  }
  get sessionKey() {
    var _this$sessionId;
    return ((_this$sessionId = this.sessionId) === null || _this$sessionId === void 0 ? void 0 : _this$sessionId.padStart(64, "0")) || "";
  }
  set sessionKey(value) {
    if (!value) throw new Error("Session key is required");
    this.sessionId = value.padStart(64, "0");
  }
  static generateRandomSessionKey() {
    return (0,eccrypto_namespaceObject.generatePrivate)().toString("hex").padStart(64, "0");
  }
  async createSession(data) {
    const privKey = Buffer.from(this.sessionKey, "hex");
    const pubKey = (0,eccrypto_namespaceObject.getPublic)(privKey).toString("hex");
    const encData = await (0,metadata_helpers_namespaceObject.encryptData)(this.sessionKey, data);
    const signature = (await (0,eccrypto_namespaceObject.sign)(privKey, (0,metadata_helpers_namespaceObject.keccak256)(Buffer.from(encData, "utf8")))).toString("hex");
    const body = {
      key: pubKey,
      data: encData,
      signature,
      namespace: this.sessionNamespace,
      timeout: this.sessionTime
    };
    await super.request({
      method: "POST",
      url: `${this.sessionServerBaseUrl}/store/set`,
      data: body
    });
    return this.sessionKey;
  }
  async authorizeSession() {
    super.checkSessionParams(this.sessionKey);
    const pubkey = (0,eccrypto_namespaceObject.getPublic)(Buffer.from(this.sessionKey, "hex")).toString("hex");
    const url = new URL(`${this.sessionServerBaseUrl}/store/get`);
    url.searchParams.append("key", pubkey);
    if (this.sessionNamespace) url.searchParams.append("namespace", this.sessionNamespace);
    const result = await super.request({
      url: url.toString()
    });
    if (!result.message) {
      throw new Error("Session Expired or Invalid public key");
    }
    const response = await (0,metadata_helpers_namespaceObject.decryptData)(this.sessionKey, result.message);
    if (response.error) {
      throw new Error("There was an error decrypting data.");
    }
    return response;
  }
  async updateSession(data) {
    super.checkSessionParams(this.sessionKey);
    const privKey = Buffer.from(this.sessionKey, "hex");
    const pubKey = (0,eccrypto_namespaceObject.getPublic)(privKey).toString("hex");
    const encData = await (0,metadata_helpers_namespaceObject.encryptData)(this.sessionKey, data);
    const signature = (await (0,eccrypto_namespaceObject.sign)(privKey, (0,metadata_helpers_namespaceObject.keccak256)(Buffer.from(encData, "utf8")))).toString("hex");
    const body = {
      key: pubKey,
      data: encData,
      signature,
      namespace: this.sessionNamespace
    };
    await super.request({
      method: "PUT",
      url: `${this.sessionServerBaseUrl}/store/update`,
      data: body
    });
  }
  async invalidateSession() {
    super.checkSessionParams(this.sessionKey);
    const privKey = Buffer.from(this.sessionKey, "hex");
    const pubKey = (0,eccrypto_namespaceObject.getPublic)(privKey).toString("hex");
    const encData = await (0,metadata_helpers_namespaceObject.encryptData)(this.sessionKey, {});
    const signature = (await (0,eccrypto_namespaceObject.sign)(privKey, (0,metadata_helpers_namespaceObject.keccak256)(Buffer.from(encData, "utf8")))).toString("hex");
    const data = {
      key: pubKey,
      data: encData,
      signature,
      namespace: this.sessionNamespace,
      timeout: 1
    };
    await super.request({
      method: "POST",
      url: `${this.sessionServerBaseUrl}/store/set`,
      data
    });
    this.sessionId = "";
    return true;
  }
}
;// CONCATENATED MODULE: ./src/index.ts


module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=openloginSessionManager.cjs.js.map