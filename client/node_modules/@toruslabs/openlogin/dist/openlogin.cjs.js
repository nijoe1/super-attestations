/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  InitializationError: () => (/* reexport */ InitializationError),
  LoginError: () => (/* reexport */ LoginError),
  OpenloginError: () => (/* reexport */ OpenloginError),
  constructURL: () => (/* reexport */ constructURL),
  "default": () => (/* reexport */ src_OpenLogin),
  getHashQueryParams: () => (/* reexport */ getHashQueryParams),
  getPopupFeatures: () => (/* reexport */ getPopupFeatures),
  getTimeout: () => (/* reexport */ getTimeout),
  isMobileOrTablet: () => (/* reexport */ isMobileOrTablet),
  loglevel: () => (/* reexport */ loglevel),
  version: () => (/* reexport */ version),
  whitelistUrl: () => (/* reexport */ whitelistUrl)
});

;// CONCATENATED MODULE: external "@babel/runtime/helpers/defineProperty"
const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);
;// CONCATENATED MODULE: external "ts-custom-error"
const external_ts_custom_error_namespaceObject = require("ts-custom-error");
;// CONCATENATED MODULE: ./src/errors.ts


class OpenloginError extends external_ts_custom_error_namespaceObject.CustomError {
  constructor(code, message) {
    // takes care of stack and proto
    super(message);
    defineProperty_default()(this, "code", void 0);
    defineProperty_default()(this, "message", void 0);
    this.code = code;
    this.message = message || "";
    // Set name explicitly as minification can mangle class names
    Object.defineProperty(this, "name", {
      value: "OpenloginError"
    });
  }
  toJSON() {
    return {
      name: this.name,
      code: this.code,
      message: this.message
    };
  }
  toString() {
    return JSON.stringify(this.toJSON());
  }
}
class InitializationError extends OpenloginError {
  constructor(code, message) {
    // takes care of stack and proto
    super(code, message);

    // Set name explicitly as minification can mangle class names
    Object.defineProperty(this, "name", {
      value: "InitializationError"
    });
  }
  static fromCode(code) {
    let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    return new InitializationError(code, `${InitializationError.messages[code]}, ${extraMessage}`);
  }
  static invalidParams() {
    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return InitializationError.fromCode(5001, extraMessage);
  }
  static notInitialized() {
    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return InitializationError.fromCode(5002, extraMessage);
  }
}

/**
 * login errors
 */
defineProperty_default()(InitializationError, "messages", {
  5000: "Custom",
  5001: "Invalid constructor params",
  5002: "SDK not initialized. please call init first"
});
class LoginError extends OpenloginError {
  constructor(code, message) {
    // takes care of stack and proto
    super(code, message);

    // Set name explicitly as minification can mangle class names
    Object.defineProperty(this, "name", {
      value: "LoginError"
    });
  }
  static fromCode(code) {
    let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    return new LoginError(code, `${LoginError.messages[code]}, ${extraMessage}`);
  }
  static invalidLoginParams() {
    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return LoginError.fromCode(5111, extraMessage);
  }
  static userNotLoggedIn() {
    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return LoginError.fromCode(5112, extraMessage);
  }
  static popupClosed() {
    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return LoginError.fromCode(5113, extraMessage);
  }
  static loginFailed() {
    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return LoginError.fromCode(5114, extraMessage);
  }
}
defineProperty_default()(LoginError, "messages", {
  5000: "Custom",
  5111: "Invalid login params",
  5112: "User not logged in.",
  5113: "login popup has been closed by the user",
  5114: "Login failed"
});
;// CONCATENATED MODULE: external "loglevel"
const external_loglevel_namespaceObject = require("loglevel");
var external_loglevel_default = /*#__PURE__*/__webpack_require__.n(external_loglevel_namespaceObject);
;// CONCATENATED MODULE: ./src/loglevel.ts

const log = external_loglevel_default().getLogger("openlogin");
log.setLevel("error");
/* harmony default export */ const loglevel = (log);
;// CONCATENATED MODULE: external "@toruslabs/openlogin-session-manager"
const openlogin_session_manager_namespaceObject = require("@toruslabs/openlogin-session-manager");
;// CONCATENATED MODULE: external "@toruslabs/openlogin-utils"
const openlogin_utils_namespaceObject = require("@toruslabs/openlogin-utils");
;// CONCATENATED MODULE: external "@toruslabs/broadcast-channel"
const broadcast_channel_namespaceObject = require("@toruslabs/broadcast-channel");
;// CONCATENATED MODULE: external "events"
const external_events_namespaceObject = require("events");
;// CONCATENATED MODULE: external "@toruslabs/eccrypto"
const eccrypto_namespaceObject = require("@toruslabs/eccrypto");
;// CONCATENATED MODULE: external "@toruslabs/metadata-helpers"
const metadata_helpers_namespaceObject = require("@toruslabs/metadata-helpers");
;// CONCATENATED MODULE: external "bowser"
const external_bowser_namespaceObject = require("bowser");
var external_bowser_default = /*#__PURE__*/__webpack_require__.n(external_bowser_namespaceObject);
;// CONCATENATED MODULE: ./src/utils.ts

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }






// don't use destructuring for process.env cause it messes up webpack env plugin
const version = "4.7.2";
async function whitelistUrl(clientId, appKey, origin) {
  const appKeyBuf = Buffer.from(appKey.padStart(64, "0"), "hex");
  if (openlogin_utils_namespaceObject.base64url.encode((0,eccrypto_namespaceObject.getPublic)(appKeyBuf)) !== clientId) throw new Error("appKey mismatch");
  const sig = await (0,eccrypto_namespaceObject.sign)(appKeyBuf, (0,metadata_helpers_namespaceObject.keccak256)(Buffer.from(origin, "utf8")));
  return openlogin_utils_namespaceObject.base64url.encode(sig);
}
function getHashQueryParams() {
  let replaceUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  const result = {};
  const url = new URL(window.location.href);
  url.searchParams.forEach((value, key) => {
    if (key !== "result") {
      result[key] = value;
    }
  });
  const queryResult = url.searchParams.get("result");
  if (queryResult) {
    try {
      const queryParams = JSON.parse((0,openlogin_utils_namespaceObject.safeatob)(queryResult));
      Object.keys(queryParams).forEach(key => {
        result[key] = queryParams[key];
      });
    } catch (error) {
      loglevel.error(error);
    }
  }
  const hash = url.hash.substring(1);
  const hashUrl = new URL(`${window.location.origin}/?${hash}`);
  hashUrl.searchParams.forEach((value, key) => {
    if (key !== "result") {
      result[key] = value;
    }
  });
  const hashResult = hashUrl.searchParams.get("result");
  if (hashResult) {
    try {
      const hashParams = JSON.parse((0,openlogin_utils_namespaceObject.safeatob)(hashResult));
      Object.keys(hashParams).forEach(key => {
        result[key] = hashParams[key];
      });
    } catch (error) {
      loglevel.error(error);
    }
  }
  if (replaceUrl) {
    const cleanUrl = window.location.origin + window.location.pathname;
    window.history.replaceState(_objectSpread(_objectSpread({}, window.history.state), {}, {
      as: cleanUrl,
      url: cleanUrl
    }), "", cleanUrl);
  }
  return result;
}
function constructURL(params) {
  const {
    baseURL,
    query,
    hash
  } = params;
  const url = new URL(baseURL);
  if (query) {
    Object.keys(query).forEach(key => {
      url.searchParams.append(key, query[key]);
    });
  }
  if (hash) {
    const h = new URL(constructURL({
      baseURL,
      query: hash
    })).searchParams.toString();
    url.hash = h;
  }
  return url.toString();
}
function getPopupFeatures() {
  // Fixes dual-screen position                             Most browsers      Firefox
  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;
  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;
  const w = 1200;
  const h = 700;
  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;
  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;
  const systemZoom = 1; // No reliable estimate

  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);
  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);
  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;
  return features;
}
function isMobileOrTablet() {
  const browser = external_bowser_default().getParser(window.navigator.userAgent);
  const platform = browser.getPlatform();
  return platform.type === (external_bowser_default()).PLATFORMS_MAP.tablet || platform.type === (external_bowser_default()).PLATFORMS_MAP.mobile;
}
function getTimeout(loginProvider) {
  if ((loginProvider === openlogin_utils_namespaceObject.LOGIN_PROVIDER.FACEBOOK || loginProvider === openlogin_utils_namespaceObject.LOGIN_PROVIDER.LINE) && isMobileOrTablet()) {
    return 1000 * 60 * 5; // 5 minutes to finish the login
  }

  return 1000 * 10; // 10 seconds
}
;// CONCATENATED MODULE: ./src/PopupHandler.ts




class PopupHandler extends external_events_namespaceObject.EventEmitter {
  constructor(_ref) {
    let {
      url,
      target,
      features,
      timeout = 30000
    } = _ref;
    super();
    defineProperty_default()(this, "url", void 0);
    defineProperty_default()(this, "target", void 0);
    defineProperty_default()(this, "features", void 0);
    defineProperty_default()(this, "window", void 0);
    defineProperty_default()(this, "windowTimer", void 0);
    defineProperty_default()(this, "iClosedWindow", void 0);
    defineProperty_default()(this, "timeout", void 0);
    this.url = url;
    this.target = target || "_blank";
    this.features = features || getPopupFeatures();
    this.window = undefined;
    this.windowTimer = undefined;
    this.iClosedWindow = false;
    this.timeout = timeout;
    this._setupTimer();
  }
  _setupTimer() {
    this.windowTimer = Number(setInterval(() => {
      if (this.window && this.window.closed) {
        clearInterval(this.windowTimer);
        setTimeout(() => {
          if (!this.iClosedWindow) {
            this.emit("close");
          }
          this.iClosedWindow = false;
          this.window = undefined;
        }, this.timeout);
      }
      if (this.window === undefined) clearInterval(this.windowTimer);
    }, 500));
  }
  open() {
    var _this$window;
    this.window = window.open(this.url, this.target, this.features);
    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();
  }
  close() {
    this.iClosedWindow = true;
    if (this.window) this.window.close();
  }
  redirect(locationReplaceOnRedirect) {
    if (locationReplaceOnRedirect) {
      window.location.replace(this.url);
    } else {
      window.location.href = this.url;
    }
  }
  async listenOnChannel(loginId) {
    return new Promise((resolve, reject) => {
      const bc = new broadcast_channel_namespaceObject.BroadcastChannel(loginId, {
        webWorkerSupport: false,
        type: "server"
      });
      bc.addEventListener("message", ev => {
        this.close();
        bc.close();
        if (ev.error) {
          reject(new Error(ev.error));
        } else {
          resolve(ev.data);
        }
      });
    });
  }
}
/* harmony default export */ const src_PopupHandler = (PopupHandler);
;// CONCATENATED MODULE: ./src/OpenLogin.ts

function OpenLogin_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function OpenLogin_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? OpenLogin_ownKeys(Object(source), !0).forEach(function (key) { defineProperty_default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : OpenLogin_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }






class OpenLogin {
  constructor(options) {
    defineProperty_default()(this, "state", {});
    defineProperty_default()(this, "options", void 0);
    defineProperty_default()(this, "versionSupportNetworks", [openlogin_utils_namespaceObject.OPENLOGIN_NETWORK.MAINNET, openlogin_utils_namespaceObject.OPENLOGIN_NETWORK.CYAN, openlogin_utils_namespaceObject.OPENLOGIN_NETWORK.AQUA]);
    defineProperty_default()(this, "sessionManager", void 0);
    defineProperty_default()(this, "currentStorage", void 0);
    defineProperty_default()(this, "_storageBaseKey", "openlogin_store");
    if (!options.clientId) throw InitializationError.invalidParams("clientId is required");
    if (!options.sdkUrl) {
      if (options.network === openlogin_utils_namespaceObject.OPENLOGIN_NETWORK.MAINNET) {
        options.sdkUrl = "https://app.openlogin.com";
      } else if (options.network === openlogin_utils_namespaceObject.OPENLOGIN_NETWORK.CYAN) {
        options.sdkUrl = "https://cyan.openlogin.com";
      } else if (options.network === openlogin_utils_namespaceObject.OPENLOGIN_NETWORK.TESTNET) {
        options.sdkUrl = "https://testing.openlogin.com";
      } else if (options.network === openlogin_utils_namespaceObject.OPENLOGIN_NETWORK.AQUA) {
        options.sdkUrl = "https://aqua.openlogin.com";
      } else if (options.network === openlogin_utils_namespaceObject.OPENLOGIN_NETWORK.DEVELOPMENT) {
        options.sdkUrl = "http://localhost:3000";
      }
    }
    if (!options.sdkUrl) {
      throw InitializationError.invalidParams("network or sdk url");
    }
    if (!options.redirectUrl) {
      options.redirectUrl = `${window.location.protocol}//${window.location.host}${window.location.pathname}`;
    }
    if (!options.uxMode) options.uxMode = openlogin_utils_namespaceObject.UX_MODE.REDIRECT;
    if (typeof options.replaceUrlOnRedirect !== "boolean") options.replaceUrlOnRedirect = true;
    if (!options.originData) options.originData = {};
    if (!options.whiteLabel) options.whiteLabel = {};
    if (!options.loginConfig) options.loginConfig = {};
    if (!options.mfaSettings) options.mfaSettings = {};
    if (!options.storageServerUrl) options.storageServerUrl = "https://broadcast-server.tor.us";
    if (!options.storageKey) options.storageKey = "local";
    if (!options.webauthnTransports) options.webauthnTransports = ["internal"];
    if (!options.sessionTime) options.sessionTime = 86400;
    this.options = options;
  }
  get privKey() {
    return this.state.privKey ? this.state.privKey.padStart(64, "0") : "";
  }
  get coreKitKey() {
    return this.state.coreKitKey ? this.state.coreKitKey.padStart(64, "0") : "";
  }
  get ed25519PrivKey() {
    return this.state.ed25519PrivKey ? this.state.ed25519PrivKey.padStart(128, "0") : "";
  }
  get coreKitEd25519Key() {
    return this.state.coreKitEd25519PrivKey ? this.state.coreKitEd25519PrivKey.padStart(128, "0") : "";
  }
  get sessionId() {
    return this.state.sessionId || "";
  }
  get sessionNamespace() {
    return this.options.sessionNamespace || "";
  }
  async init() {
    // get sessionNamespace from the redirect result.
    const params = getHashQueryParams(this.options.replaceUrlOnRedirect);
    if (params.sessionNamespace) this.options.sessionNamespace = params.sessionNamespace;
    const storageKey = this.options.sessionNamespace ? `${this._storageBaseKey}_${this.options.sessionNamespace}` : this._storageBaseKey;
    this.currentStorage = openlogin_utils_namespaceObject.BrowserStorage.getInstance(storageKey, this.options.storageKey);
    const sessionId = this.currentStorage.get("sessionId");
    this.sessionManager = new openlogin_session_manager_namespaceObject.OpenloginSessionManager({
      sessionServerBaseUrl: this.options.storageServerUrl,
      sessionNamespace: this.options.sessionNamespace,
      sessionTime: this.options.sessionTime,
      sessionId
    });
    if (this.options.network === openlogin_utils_namespaceObject.OPENLOGIN_NETWORK.TESTNET) {
      // using console log because it shouldn't be affected by loglevel config
      // eslint-disable-next-line no-console
      console.log("%c WARNING! You are on testnet. Please set network: 'mainnet' in production", "color: #FF0000");
    }
    if (params.error) {
      throw LoginError.loginFailed(params.error);
    }
    if (params.sessionId) {
      this.currentStorage.set("sessionId", params.sessionId);
      this.sessionManager.sessionKey = params.sessionId;
    }
    if (this.sessionManager.sessionKey) {
      const data = await this._authorizeSession();
      // Fill state with correct info from session
      // If session is invalid all the data is unset here.
      this.updateState(data);
      if (Object.keys(data).length === 0) {
        // If session is invalid, unset the sessionId from localStorage.
        this.currentStorage.set("sessionId", "");
      }
    }
  }
  async login(params) {
    if (!params.loginProvider) throw LoginError.invalidLoginParams(`loginProvider is required`);

    // in case of redirect mode, redirect url will be dapp specified
    // in case of popup mode, redirect url will be sdk specified
    const defaultParams = {
      redirectUrl: this.options.redirectUrl
    };
    const loginParams = OpenLogin_objectSpread(OpenLogin_objectSpread({
      loginProvider: params.loginProvider
    }, defaultParams), params);
    // do this in popup-window route
    // loginParams.redirectUrl = this.options.uxMode === UX_MODE.POPUP ? `${this.options.sdkUrl}/popup-window` : loginParams.redirectUrl;

    const base64url = this.getBaseUrl();

    // construct the url to open for either popup/redirect mode and call request method to handle the rest
    const loginId = await this.getLoginId(loginParams);
    const configParams = {
      loginId,
      sessionNamespace: this.options.sessionNamespace
    };
    if (this.options.uxMode === openlogin_utils_namespaceObject.UX_MODE.REDIRECT) {
      const loginUrl = constructURL({
        baseURL: base64url,
        hash: {
          b64Params: (0,openlogin_utils_namespaceObject.jsonToBase64)(configParams)
        }
      });
      window.location.href = loginUrl;
      return undefined;
    }
    return new Promise((resolve, reject) => {
      const loginUrl = constructURL({
        baseURL: base64url,
        hash: {
          b64Params: (0,openlogin_utils_namespaceObject.jsonToBase64)(configParams)
        }
      });
      const currentWindow = new src_PopupHandler({
        url: loginUrl,
        timeout: getTimeout(params.loginProvider)
      });
      currentWindow.on("close", () => {
        reject(LoginError.popupClosed());
      });
      currentWindow.listenOnChannel(loginId).then(_ref => {
        let {
          sessionId,
          sessionNamespace
        } = _ref;
        this.sessionManager.sessionKey = sessionId;
        this.options.sessionNamespace = sessionNamespace;
        this.currentStorage.set("sessionId", sessionId);
        return this.sessionManager.authorizeSession();
      }).then(sessionData => {
        this.updateState(sessionData);
        return resolve({
          privKey: this.privKey
        });
      }).catch(reject);
      currentWindow.open();
    });
  }
  async logout() {
    if (!this.sessionManager.sessionKey) throw LoginError.userNotLoggedIn();
    await this.sessionManager.invalidateSession();
    this.updateState({
      privKey: "",
      coreKitKey: "",
      coreKitEd25519PrivKey: "",
      ed25519PrivKey: "",
      walletKey: "",
      oAuthPrivateKey: "",
      tKey: "",
      userInfo: {
        name: "",
        profileImage: "",
        dappShare: "",
        idToken: "",
        oAuthIdToken: "",
        oAuthAccessToken: "",
        appState: "",
        email: "",
        verifier: "",
        verifierId: "",
        aggregateVerifier: "",
        typeOfLogin: ""
      }
    });
    this.currentStorage.set("sessionId", "");
  }
  getUserInfo() {
    if (!this.sessionManager.sessionKey) {
      throw LoginError.userNotLoggedIn();
    }
    return this.state.userInfo;
  }
  async getLoginId(loginParams) {
    if (!this.sessionManager) throw InitializationError.notInitialized();
    const dataObject = {
      options: this.options,
      params: loginParams
    };
    const loginId = openlogin_session_manager_namespaceObject.OpenloginSessionManager.generateRandomSessionKey();
    const loginSessionMgr = new openlogin_session_manager_namespaceObject.OpenloginSessionManager({
      sessionServerBaseUrl: this.options.storageServerUrl,
      sessionNamespace: this.options.sessionNamespace,
      sessionTime: 600,
      // each login key must be used with 10 mins (might be used at the end of popup redirect)
      sessionId: loginId
    });
    await loginSessionMgr.createSession(JSON.parse(JSON.stringify(dataObject)));
    return loginId;
  }
  async _authorizeSession() {
    try {
      if (!this.sessionManager.sessionKey) return {};
      const result = await this.sessionManager.authorizeSession();
      return result;
    } catch (err) {
      external_loglevel_default().error("authorization failed", err);
      return {};
    }
  }
  updateState(data) {
    this.state = OpenLogin_objectSpread(OpenLogin_objectSpread({}, this.state), data);
  }
  getBaseUrl() {
    if (this.versionSupportNetworks.includes(this.options.network)) {
      return `${this.options.sdkUrl}/v${version.split(".")[0]}/start`;
    }
    return `${this.options.sdkUrl}/start`;
  }
}
/* harmony default export */ const src_OpenLogin = (OpenLogin);
;// CONCATENATED MODULE: ./src/index.ts




module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=openlogin.cjs.js.map