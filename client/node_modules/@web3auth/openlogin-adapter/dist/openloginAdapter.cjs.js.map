{"version":3,"file":"openloginAdapter.cjs.js","mappings":"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","sources":["webpack://@web3auth/openlogin-adapter/./src/config.ts","webpack://@web3auth/openlogin-adapter/./src/interface.ts","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@toruslabs/openlogin\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"lodash.merge\"","webpack://@web3auth/openlogin-adapter/./src/openloginAdapter.ts","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@toruslabs/openlogin-utils\"","webpack://@web3auth/openlogin-adapter/webpack/bootstrap","webpack://@web3auth/openlogin-adapter/webpack/runtime/compat get default export","webpack://@web3auth/openlogin-adapter/webpack/runtime/define property getters","webpack://@web3auth/openlogin-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/openlogin-adapter/webpack/runtime/make namespace object","webpack://@web3auth/openlogin-adapter/./src/index.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin-utils\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    loginSettings: {},\n    privateKeyProvider: undefined,\n  };\n};\n","import { BaseRedirectParams, LoginConfig, LoginParams, OpenLoginOptions } from \"@toruslabs/openlogin-utils\";\nimport { BaseAdapterSettings } from \"@web3auth/base\";\nimport type { IBaseProvider } from \"@web3auth/base-provider\";\n\nexport type LoginSettings = Partial<LoginParams> & Partial<BaseRedirectParams>;\n\ntype MakeOptional<Type, Key extends keyof Type> = Omit<Type, Key> & Partial<Pick<Type, Key>>;\n\nexport type PrivateKeyProvider = IBaseProvider<string>;\n\nexport interface OpenloginAdapterOptions extends BaseAdapterSettings {\n  adapterSettings?: MakeOptional<OpenLoginOptions, \"clientId\" | \"network\"> & {\n    useCoreKitKey?: boolean;\n  };\n  loginSettings?: LoginSettings;\n  privateKeyProvider?: PrivateKeyProvider;\n}\n\nexport * from \"@toruslabs/openlogin-utils\";\nexport { LoginConfig };\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","import OpenLogin from \"@toruslabs/openlogin\";\nimport { LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin-utils\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions, PrivateKeyProvider } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  public privateKeyProvider: PrivateKeyProvider | null = null;\n\n  private openloginOptions: OpenloginAdapterOptions[\"adapterSettings\"];\n\n  private loginSettings: LoginSettings = { loginProvider: \"\" };\n\n  constructor(params: OpenloginAdapterOptions = {}) {\n    super(params);\n    this.setAdapterSettings({\n      ...params.adapterSettings,\n      chainConfig: params.chainConfig,\n      clientId: params.clientId || \"\",\n      sessionTime: params.sessionTime,\n      web3AuthNetwork: params.web3AuthNetwork,\n      useCoreKitKey: params.useCoreKitKey,\n      privateKeyProvider: params.privateKeyProvider,\n    });\n    this.loginSettings = params.loginSettings || { loginProvider: \"\" };\n    this.privateKeyProvider = params.privateKeyProvider || null;\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status !== ADAPTER_STATUS.NOT_READY && this.privateKeyProvider) {\n      return this.privateKeyProvider.provider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.openloginOptions) throw WalletInitializationError.invalidParams(\"openloginOptions is required before openlogin's initialization\");\n    const isRedirectResult = this.openloginOptions.uxMode === UX_MODE.REDIRECT;\n\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin({\n      ...this.openloginOptions,\n      clientId: this.clientId,\n      network: this.openloginOptions.network || this.web3AuthNetwork || OPENLOGIN_NETWORK.MAINNET,\n    });\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n\n      const finalPrivKey = this._getFinalPrivKey();\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (finalPrivKey && (options.autoConnect || isRedirectResult)) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      } else if (error instanceof Web3AuthError) {\n        throw error;\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privateKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: Partial<OpenLoginOptions & BaseAdapterSettings> & { privateKeyProvider?: PrivateKeyProvider }): void {\n    super.setAdapterSettings(adapterSettings);\n    const defaultOptions = getOpenloginDefaultOptions();\n    log.info(\"setting adapter settings\", adapterSettings);\n    this.openloginOptions = {\n      ...defaultOptions.adapterSettings,\n      ...this.openloginOptions,\n      ...adapterSettings,\n    };\n    if (adapterSettings.web3AuthNetwork) {\n      this.openloginOptions.network = adapterSettings.web3AuthNetwork;\n    }\n    if (adapterSettings.useCoreKitKey !== undefined) {\n      this.openloginOptions.useCoreKitKey = adapterSettings.useCoreKitKey;\n    }\n    if (adapterSettings.privateKeyProvider) {\n      this.privateKeyProvider = adapterSettings.privateKeyProvider;\n    }\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(chainConfig, init);\n    this.privateKeyProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.privateKeyProvider?.switchChain(params);\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n\n  private _getFinalPrivKey() {\n    if (!this.openloginInstance) return \"\";\n    let finalPrivKey = this.openloginInstance.privKey;\n    // coreKitKey is available only for custom verifiers by default\n    if (this.openloginOptions?.useCoreKitKey) {\n      // this is to check if the user has already logged in but coreKitKey is not available.\n      // when useCoreKitKey is set to true.\n      // This is to ensure that when there is no user session active, we don't throw an exception.\n      if (this.openloginInstance.privKey && !this.openloginInstance.coreKitKey) {\n        throw WalletLoginError.coreKitKeyNotFound();\n      }\n      finalPrivKey = this.openloginInstance.coreKitKey;\n    }\n    return finalPrivKey;\n  }\n\n  private _getFinalEd25519PrivKey() {\n    if (!this.openloginInstance) return \"\";\n    let finalPrivKey = this.openloginInstance.ed25519PrivKey;\n    // coreKitKey is available only for custom verifiers by default\n    if (this.openloginOptions?.useCoreKitKey) {\n      // this is to check if the user has already logged in but coreKitKey is not available.\n      // when useCoreKitKey is set to true.\n      // This is to ensure that when there is no user session active, we don't throw an exception.\n      if (this.openloginInstance.ed25519PrivKey && !this.openloginInstance.coreKitEd25519Key) {\n        throw WalletLoginError.coreKitKeyNotFound();\n      }\n      finalPrivKey = this.openloginInstance.coreKitEd25519Key;\n    }\n    return finalPrivKey;\n  }\n\n  private async connectWithProvider(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<void> {\n    if (!this.privateKeyProvider) throw WalletInitializationError.invalidParams(\"PrivateKey Provider is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    const keyAvailable = this._getFinalPrivKey();\n    // if not logged in then login\n    if (!keyAvailable || params.extraLoginOptions?.id_token) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      if (!params.loginProvider && !this.loginSettings.loginProvider)\n        throw WalletInitializationError.invalidParams(\"loginProvider is required for login\");\n      await this.openloginInstance.login(\n        merge(this.loginSettings, params, {\n          extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint },\n        })\n      );\n    }\n    let finalPrivKey = this._getFinalPrivKey();\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        finalPrivKey = this._getFinalEd25519PrivKey();\n      }\n\n      await this.privateKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n","module.exports = require(\"@toruslabs/openlogin-utils\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from \"./config\";\nexport * from \"./interface\";\nexport * from \"./openloginAdapter\";\n"],"names":["OPENLOGIN_NETWORK","UX_MODE","getOpenloginDefaultOptions","adapterSettings","network","MAINNET","clientId","uxMode","POPUP","loginSettings","privateKeyProvider","undefined","LoginConfig","OpenLogin","SUPPORTED_KEY_CURVES","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","BaseAdapter","CHAIN_NAMESPACES","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","Web3AuthError","merge","OpenloginAdapter","constructor","params","arguments","length","_defineProperty","OPENLOGIN","MULTICHAIN","IN_APP","NOT_READY","EIP155","loginProvider","setAdapterSettings","_objectSpread","chainConfig","sessionTime","web3AuthNetwork","useCoreKitKey","chainConfigProxy","provider","status","_","Error","init","options","checkInitializationRequirements","invalidParams","openloginOptions","isRedirectResult","REDIRECT","replaceUrlOnRedirect","openloginInstance","debug","READY","emit","finalPrivKey","_getFinalPrivKey","autoConnect","rehydrated","connect","error","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","popupClosed","connectionError","disconnect","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","authenticateUser","userInfo","getUserInfo","idToken","defaultOptions","info","addChain","_this$privateKeyProvi","checkAddChainRequirements","addChainConfig","switchChain","_this$privateKeyProvi2","checkSwitchChainRequirements","getChainConfig","chainId","_this$openloginOption","privKey","coreKitKey","coreKitKeyNotFound","_getFinalEd25519PrivKey","_this$openloginOption2","ed25519PrivKey","coreKitEd25519Key","_params$extraLoginOpt","keyAvailable","extraLoginOptions","id_token","_params$extraLoginOpt2","curve","currentChainNamespace","SOLANA","ED25519","SECP256K1","login","login_hint","setupProvider","reconnected"],"sourceRoot":""}