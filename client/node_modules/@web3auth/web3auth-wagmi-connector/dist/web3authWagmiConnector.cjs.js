/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 123:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  a: () => (/* binding */ Web3AuthConnector)
});

;// CONCATENATED MODULE: external "@babel/runtime/helpers/defineProperty"
const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);
;// CONCATENATED MODULE: external "@wagmi/core"
const core_namespaceObject = require("@wagmi/core");
;// CONCATENATED MODULE: external "@web3auth/base"
const base_namespaceObject = require("@web3auth/base");
;// CONCATENATED MODULE: external "viem"
const external_viem_namespaceObject = require("viem");
;// CONCATENATED MODULE: ./src/lib/connector.ts

/* eslint-disable import/no-extraneous-dependencies */



const IS_SERVER = typeof window === "undefined";
const {
  ADAPTER_STATUS,
  CHAIN_NAMESPACES,
  WALLET_ADAPTERS,
  log
} = base_namespaceObject;
function isIWeb3AuthModal(obj) {
  return typeof obj.initModal !== "undefined";
}
function normalizeChainId(chainId) {
  if (typeof chainId === "string") return Number.parseInt(chainId, chainId.trim().substring(0, 2) === "0x" ? 16 : 10);
  if (typeof chainId === "bigint") return Number(chainId);
  return chainId;
}
class Web3AuthConnector extends core_namespaceObject.Connector {
  constructor(_ref) {
    let {
      chains,
      options
    } = _ref;
    super({
      chains,
      options
    });
    defineProperty_default()(this, "ready", !IS_SERVER);
    defineProperty_default()(this, "id", "web3auth");
    defineProperty_default()(this, "name", "Web3Auth");
    defineProperty_default()(this, "provider", null);
    defineProperty_default()(this, "loginParams", void 0);
    defineProperty_default()(this, "modalConfig", void 0);
    defineProperty_default()(this, "web3AuthInstance", void 0);
    defineProperty_default()(this, "onAccountsChanged", accounts => {
      if (accounts.length === 0) this.emit("disconnect");else this.emit("change", {
        account: (0,external_viem_namespaceObject.getAddress)(accounts[0])
      });
    });
    defineProperty_default()(this, "onChainChanged", chainId => {
      const id = normalizeChainId(chainId);
      const unsupported = this.isChainUnsupported(id);
      log.info("chainChanged", id, unsupported);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.web3AuthInstance = options.web3AuthInstance;
    this.loginParams = options.loginParams || null;
    this.modalConfig = options.modalConfig || null;
  }
  async connect() {
    let {
      chainId
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    try {
      this.emit("message", {
        type: "connecting"
      });
      await this.getProvider();
      this.provider.on("accountsChanged", this.onAccountsChanged);
      this.provider.on("chainChanged", this.onChainChanged);
      if (!this.web3AuthInstance.connected) {
        if (isIWeb3AuthModal(this.web3AuthInstance)) {
          await this.web3AuthInstance.connect();
        } else if (this.loginParams) {
          await this.web3AuthInstance.connectTo(WALLET_ADAPTERS.OPENLOGIN, this.loginParams);
        } else {
          log.error("please provide valid loginParams when using @web3auth/no-modal");
          throw new external_viem_namespaceObject.UserRejectedRequestError("please provide valid loginParams when using @web3auth/no-modal");
        }
      }
      const [account, connectedChainId] = await Promise.all([this.getAccount(), this.getChainId()]);
      let unsupported = this.isChainUnsupported(connectedChainId);
      let id = connectedChainId;
      if (chainId && connectedChainId !== chainId) {
        // try switching chain
        const chain = await this.switchChain(chainId);
        id = chain.id;
        unsupported = this.isChainUnsupported(id);
      }
      return {
        account,
        chain: {
          id,
          unsupported
        }
      };
    } catch (error) {
      log.error("error while connecting", error);
      this.onDisconnect();
      throw new external_viem_namespaceObject.UserRejectedRequestError("Something went wrong");
    }
  }
  async getWalletClient() {
    let {
      chainId
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);
    const chain = this.chains.find(x => x.id === chainId);
    if (!provider) throw new Error("provider is required.");
    return (0,external_viem_namespaceObject.createWalletClient)({
      account,
      chain,
      transport: (0,external_viem_namespaceObject.custom)(provider)
    });
  }
  async getAccount() {
    const provider = await this.getProvider();
    const accounts = await provider.request({
      method: "eth_accounts"
    });
    return (0,external_viem_namespaceObject.getAddress)(accounts[0]);
  }
  async getProvider() {
    if (this.provider) {
      return this.provider;
    }
    if (this.web3AuthInstance.status === ADAPTER_STATUS.NOT_READY) {
      if (isIWeb3AuthModal(this.web3AuthInstance)) {
        await this.web3AuthInstance.initModal({
          modalConfig: this.modalConfig
        });
      } else if (this.loginParams) {
        await this.web3AuthInstance.init();
      } else {
        log.error("please provide valid loginParams when using @web3auth/no-modal");
        throw new external_viem_namespaceObject.UserRejectedRequestError("please provide valid loginParams when using @web3auth/no-modal");
      }
    }
    this.provider = this.web3AuthInstance.provider;
    return this.provider;
  }
  async isAuthorized() {
    try {
      const account = await this.getAccount();
      return !!account;
    } catch {
      return false;
    }
  }
  async getChainId() {
    await this.getProvider();
    const chainId = await this.provider.request({
      method: "eth_chainId"
    });
    log.info("chainId", chainId);
    return normalizeChainId(chainId);
  }
  async switchChain(chainId) {
    try {
      var _chain$blockExplorers, _chain$nativeCurrency, _chain$nativeCurrency2;
      const chain = this.chains.find(x => x.id === chainId);
      if (!chain) throw new external_viem_namespaceObject.SwitchChainError(new Error("chain not found on connector."));
      await this.web3AuthInstance.addChain({
        chainNamespace: CHAIN_NAMESPACES.EIP155,
        chainId: `0x${chain.id.toString(16)}`,
        rpcTarget: chain.rpcUrls.default.http[0],
        displayName: chain.name,
        blockExplorer: ((_chain$blockExplorers = chain.blockExplorers) === null || _chain$blockExplorers === void 0 ? void 0 : _chain$blockExplorers.default.url[0]) || "",
        ticker: ((_chain$nativeCurrency = chain.nativeCurrency) === null || _chain$nativeCurrency === void 0 ? void 0 : _chain$nativeCurrency.symbol) || "ETH",
        tickerName: ((_chain$nativeCurrency2 = chain.nativeCurrency) === null || _chain$nativeCurrency2 === void 0 ? void 0 : _chain$nativeCurrency2.name) || "Ethereum",
        decimals: chain.nativeCurrency.decimals || 18
      });
      log.info("Chain Added: ", chain.name);
      await this.web3AuthInstance.switchChain({
        chainId: `0x${chain.id.toString(16)}`
      });
      log.info("Chain Switched to ", chain.name);
      return chain;
    } catch (error) {
      log.error("Error: Cannot change chain", error);
      throw new external_viem_namespaceObject.SwitchChainError(error);
    }
  }
  async disconnect() {
    await this.web3AuthInstance.logout();
    const provider = await this.getProvider();
    provider.removeListener("accountsChanged", this.onAccountsChanged);
    provider.removeListener("chainChanged", this.onChainChanged);
  }
  isChainUnsupported(chainId) {
    return !this.chains.some(x => x.id === chainId);
  }
  onDisconnect() {
    this.emit("disconnect");
  }
}

/***/ }),

/***/ 470:
/***/ (() => {



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Web3AuthConnector: () => (/* reexport safe */ _lib_connector__WEBPACK_IMPORTED_MODULE_0__.a)
/* harmony export */ });
/* harmony import */ var _lib_connector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(123);
/* harmony import */ var _lib_interfaces__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(470);
/* harmony import */ var _lib_interfaces__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lib_interfaces__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _lib_interfaces__WEBPACK_IMPORTED_MODULE_1__) if(["default","Web3AuthConnector"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _lib_interfaces__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);


})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=web3authWagmiConnector.cjs.js.map