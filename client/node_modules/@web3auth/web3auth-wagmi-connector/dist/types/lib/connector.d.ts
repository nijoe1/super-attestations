import { Address, Chain, Connector, ConnectorData, WalletClient } from "@wagmi/core";
import type { SafeEventEmitterProvider } from "@web3auth/base";
import type { Options } from "./interfaces";
export declare class Web3AuthConnector extends Connector<SafeEventEmitterProvider, Options> {
    ready: boolean;
    readonly id = "web3auth";
    readonly name = "Web3Auth";
    protected provider: SafeEventEmitterProvider | null;
    private loginParams;
    private modalConfig;
    private web3AuthInstance;
    constructor({ chains, options }: {
        chains?: Chain[];
        options: Options;
    });
    connect({ chainId }?: {
        chainId?: number;
    }): Promise<Required<ConnectorData>>;
    getWalletClient({ chainId }?: {
        chainId?: number;
    }): Promise<WalletClient>;
    getAccount(): Promise<Address>;
    getProvider(): Promise<SafeEventEmitterProvider>;
    isAuthorized(): Promise<boolean>;
    getChainId(): Promise<number>;
    switchChain(chainId: number): Promise<Chain>;
    disconnect(): Promise<void>;
    protected onAccountsChanged: (accounts: string[]) => void;
    protected isChainUnsupported(chainId: number): boolean;
    protected onChainChanged: (chainId: string | number) => void;
    protected onDisconnect(): void;
}
